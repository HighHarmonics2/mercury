// set randomSeed 8473
// set scale minor_harmonic C
// set tempo 140 10000

// ring ht [1 0 1 1 0 0.5]
// ring bt hexBeat(92929805);
// ring bt hexBeat();

// ring bt hexBeat(ecabb);
// ring bss euclid(17 13 2)
// ring pan spreadFloat(32 -1 1)

// ring smps [tom_hi tom_lo tom_mid]

// new sample smps time(1/16) beat(kck) gain(0.4) pan(random) fx(reverb 0.5 11) fx(delay 3/16 5/16 0.8) shape(1 80 1)

// ring hats fill(hat_min 4 hat_min_open 1)
// new sample hats time(1/4 1/8) beat(1 1) pan(random) shape(1 300) name(hat)
// 	set hat fx(delay 3/16 5/16 0.9)
// new sample kick_dub time(1/16) gain(2) beat(bt 2)
// new sample snare_dub time(2 1/2) name(sn)
// 	set sn fx(reverb 1.1 7) beat(1 1) gain(2)
// 	set sn fx(delay 3/8 4/8 0.9)

// ring nts [0 0 0 0 [0 19 36]]
// ring len spread(32 20 500)
// ring len palin(len)

// new synth saw time(1/16) beat(1) shape(1 len) name(bass)
// 	set bass fx(double) wave2(saw 0.99931) gain(1.1)
// 	set bass note(nts 0) fx(lfo 1/4 2 1) fx(reverb 1 15)
// 	// set bass fx(delay 2/16 3/16 0.5 0.9)
// 	set bass fx(filter low 1 4000 200 0.4 1 0.2)

// ring clp euclidean(32 5)
// new sample clap_909 time(1/16) gain(4) beat(clp) fx(double) name(c)
// 	set c fx(reverb 0.3 4) fx(drive 5)

// killAll

possible arrays and datatypes with arbitrary spaces
ring ar1 [0 12 3.14 56 789]
ring ar2 [11 22 33 44 55]
ring ar3 [hat kick 3.14 123]
ring ar4 [0 5 7 9]
ring ar5 [0 12 24 -12]
ring arr2d [0[1 2] 3]
ring ar6 [0 [ 1 2 ] 3 [ 4 5 6] 7]
ring arr2d2 [hat [kick snare] 1.23 [4 5 [6 7] ]8 9]
ring ar8 (0 (1 3)2 5(6 7 8 )  )

ring spr1 spread(5 0 12)
// => [0 2 4 7 9]
ring spr2 spreadFloat(5 -1 1)
// => [-1 -0.6 -0.2 0.2 0.6]
ring spr3 spreadF(5 0 2)
// => [0 0.4 0.8 1.2 1.6]

ring spi1 spreadInclusive(5 0 12)
// => [0 3 6 9 12]
ring spi2 spreadInclusiveFloat(5 -1 1)
// => [-1 -0.5 0 0.5 1]
ring spi3 spreadInclusiveF(5 0 2)
// => [0 0.5 1 1.5 2]

ring fll1 fill(10 2 15 3 20 4)
// => [10 10 15 15 15 20 20 20 20]
ring fll2 fill(kick_min 2 hat_min 3)
// => [kick_min kick_min hat_min hat_min hat_min]

ring sin1 sine(10)
// => [6 9 11 11 9 6 2 0 0 2]
ring sin2 sine(10 1 -12 12)
// => [0 7 11 11 7 0 -7 -11 -11 -7]
ring sin3 sine(10 2 0 5)
// => [2 4 3 1 0 2 4 3 1 0]
ring sin4 sineFloat(8)
// => [0 0.707 1 0.707 0 -0.707 -1 -0.707]
ring sin5 sineF(12 3 -1 1)
// => [0 1 0 -1 0 1 0 -1 0 1 0 -1]

ring cos1 cosine(10)
// => [12 10 7 4 1 0 1 4 7 10]
ring cos2 cosine(10 1 -12 12)
// => [12 9 3 -3 -9 -12 -9 -3 3 9]
ring cos3 cosine(10 2 0 5)
// => [5 3 0 0 3 4 3 0 0 3]
ring cos4 cosineFloat(8)
// => [1 0.707 0 -0.707 -1 -0.707 0 0.707]
ring cos5 cosineF(12 3 -1 1)
// => [1 0 -1 0 1 0 -1 0 1 0 -1 0]

ring euc1 euclidean()
// => [1 0 1 0 1 0 1 0]
ring euc2 euclid(7 5)
// => [1 1 0 1 1 0 1]
ring euc3 euclid(7 5 2)
// => [0 1 1 1 0 1 1]

ring hex1 hexBeat()
// => [1 0 0 0]
ring hex2 hex(a)
// => [1 0 1 0]
ring hex3 hex(f9cb)
// => [1 1 1 1 1 0 0 1 1 1 0 0 1 0 1 1]

ring fib1 fibonacci(10)
// => [0 1 1 2 3 5 8 13 21 34]
ring fib2 fibonacci(3 10)
// => [55 89 144]

ring psn1 pisano()
// => [0 1 1 2 3 5 8 1 9 10 7 5 0 5 5 10 3 1 4 5 9 2 11 1]
ring psn2 pisano(3)
// => [0 1 1 2 0 2 2 1]
ring psn3 pisano(11)
// => [0 1 1 2 3 5 8 2 10 1]

ring pll1 pell(8)
// => [0 1 2 5 12 29 70 169]
ring luc1 lucas(8)
// => [2 1 3 4 7 11 18 29]
ring tfi1 threeFibonacci(8)
// => [0 1 3 10 33 109 360 1189]

// ring rnd random(20 0 12)
// ring bt1 euclid(8 5 1)
// ring smp shuffle(smp)

// ring jn join(ar1 ar3 spr ar5 ar6)

// ring cln clone(ar4 0 12 24 -12)
// ring dup duplicate(0 4)
// ring dp2 duplicate(ar3 4)
// // ring dp2 duplicate(ar3 hat)

// ring vry every(bt1 4 8)
// ring vr2 every(bt1 4 8 1)

// ring inv invert(ar5)
// ring in2 invert(ar4 0)
// ring in3 invert(ar4 2 5)

// ring lce lace(ar1 ar2)
// ring lce lace(in2 in3 ar3)

// ring mrg merge(ar4 ar5)

// ring pld palindrome(ar4)
// ring rev reverse(ar4)
// ring rv2 reverse(ar3)
// ring rot rotate(ar4 -2)
// ring rt2 rotate(ar3 2)

// // ring spr spray
// ring unq unique(rnd)
// ring sm2 unique(smp)
