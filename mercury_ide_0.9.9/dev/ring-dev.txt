
// possible arrays and datatypes with arbitrary spaces
// ring ar1 [0 12 3.14 56 789]
// ring ar2 [11 22 33 44 55]
// ring ar3 [hat kick 3.14 123]
// ring ar4 [0 5 7 9]
// ring ar5 [0 12 24 -12]
// ring arr2d [0[1 2] 3]
// ring ar6 [0 [ 1 2 ] 3 [ 4 5 6] 7]
// ring arr2d2 [hat [kick snare] 1.23 [4 5 [6 7] ]8 9]
// ring ar8 (0 (1 3)2 5(6 7 8 )  )

// ring spr1 spread(5 0 12)
// // => [0 2 4 7 9]
// ring spr2 spreadFloat(5 -1 1)
// // => [-1 -0.6 -0.2 0.2 0.6]
// ring spr3 spreadF(5 0 2)
// // => [0 0.4 0.8 1.2 1.6]

// ring spi1 spreadInclusive(5 0 12)
// // => [0 3 6 9 12]
// ring spi2 spreadInclusiveFloat(5 -1 1)
// // => [-1 -0.5 0 0.5 1]
// ring spi3 spreadInclusiveF(5 0 2)
// // => [0 0.5 1 1.5 2]

// ring fll1 fill(10 2 15 3 20 4)
// // => [10 10 15 15 15 20 20 20 20]
// ring fll2 fill(kick_min 2 hat_min 3)
// // => [kick_min kick_min hat_min hat_min hat_min]

// ring sin1 sine(10)
// // => [6 9 11 11 9 6 2 0 0 2]
// ring sin2 sine(10 1 -12 12)
// // => [0 7 11 11 7 0 -7 -11 -11 -7]
// ring sin3 sine(10 2 0 5)
// // => [2 4 3 1 0 2 4 3 1 0]
// ring sin4 sineFloat(8)
// // => [0 0.707 1 0.707 0 -0.707 -1 -0.707]
// ring sin5 sineF(12 3 -1 1)
// // => [0 1 0 -1 0 1 0 -1 0 1 0 -1]

// ring cos1 cosine(10)
// // => [12 10 7 4 1 0 1 4 7 10]
// ring cos2 cosine(10 1 -12 12)
// // => [12 9 3 -3 -9 -12 -9 -3 3 9]
// ring cos3 cosine(10 2 0 5)
// // => [5 3 0 0 3 4 3 0 0 3]
// ring cos4 cosineFloat(8)
// // => [1 0.707 0 -0.707 -1 -0.707 0 0.707]
// ring cos5 cosineF(12 3 -1 1)
// // => [1 0 -1 0 1 0 -1 0 1 0 -1 0]

// ring euc1 euclidean()
// // => [1 0 1 0 1 0 1 0]
// ring euc2 euclid(7 5)
// // => [1 1 0 1 1 0 1]
// ring euc3 euclid(7 5 2)
// // => [0 1 1 1 0 1 1]

// ring hex1 hexBeat()
// // => [1 0 0 0]
// ring hex2 hex(a)
// // => [1 0 1 0]
// ring hex3 hex(f9cb)
// // => [1 1 1 1 1 0 0 1 1 1 0 0 1 0 1 1]

// ring fib1 fibonacci(10)
// // => [0 1 1 2 3 5 8 13 21 34]
// ring fib2 fibonacci(3 10)
// // => [55 89 144]

// ring psn1 pisano()
// // => [0 1 1 2 3 5 8 1 9 10 7 5 0 5 5 10 3 1 4 5 9 2 11 1]
// ring psn2 pisano(3)
// // => [0 1 1 2 0 2 2 1]
// ring psn3 pisano(11)
// // => [0 1 1 2 3 5 8 2 10 1]

// ring pll1 pell(8)
// // => [0 1 2 5 12 29 70 169]
// ring luc1 lucas(8)
// // => [2 1 3 4 7 11 18 29]
// ring tfi1 threeFibonacci(8)
// // => [0 1 3 10 33 109 360 1189]

// set randomSeed 31415
// ring rnd1 random(5)
// // => [1 0 0 1 1]
// ring rnd2 random(5 12)
// // => [0 10 3 2 2]
// ring rnd3 rand(5 -12 12)
// // => [-2 -5 -8 -11 6]

// set randomSeed 31415
// ring rnf1 randomFloat(5)
// // => [0.81 0.32 0.01 0.85 0.88]
// ring rnf2 randomF(5 0 12)
// // => [0.16 10.72 3.16 262 2.34]
// ring rnf3 randF(5 -12 12)
// // => [-1.19 -4.21 -7.36 -10.31 6.82]

// set randomSeed 1618
// ring urn1 urn(5)
// // => [3 7 10 0 2]
// ring urn2 urn(8 4)
// // => [0 2 1 3 1 3 0 2]
// ring urn3 urn(8 10 14)
// // => [13 10 12 11 12 10 13 11]

// set randomSeed 271828
// ring coin1 coin(8)
// // => [1 0 1 0 1 0 1 1]
// ring dice1 dice(8)
// // => [5 4 6 4 4 5 4 2]

// set randomSeed 271828
// ring twv1 twelveTone()
// // => [10 7 6 3 2 9 8 4 1 5 0 11]

// set randomSeed 62832
// ring samples [hat snare kick]
// ring sequence choose(10 samples)
// // => [hat kick hat kick hat snare kick hat hat hat]
// ring notes [0 3 7 5 9 12]
// ring melody choose(10 notes)
// // => [0 5 3 9 0 7 3 12 3 7]

// set randomSeed 62832
// ring samples [hat snare kick tom]
// ring sequence pick(10 samples)
// // => [hat kick tom snare tom hat snare kick tom hat]
// ring notes [0 3 7 5 9 12]
// ring melody pick(10 notes)
// // => [3 0 7 9 12 5 0 7 12 9]

// set randomSeed 14142
// ring samples [hat snare kick tom]
// ring shf1 shuffle(samples)
// // => [snare tom kick hat]
// ring notes [0 3 7 5 9 12]
// ring shf2 scramble(notes)
// // => [12 0 3 7 5 9]

// ring notes [0 3 7]
// ring melody clone(notes 0 12 7 -7)
// // => [0 3 7 12 15 19 7 10 14 -7 -4 0]

// ring partA [0 3 7]
// ring partB [24 19 12]
// ring partC [-7 -5 -3]
// ring phrase combine(partA partB partC)
// // => [0 3 7 24 19 12 -7 -5 -3]

// ring partC [kick hat snare hat]
// ring partD [hat hat hat snare]
// ring sequence join(partC partD)
// // => [kick hat snare hat hat hat hat snare]
// // concat()

// ring notes [0 3 7]
// ring phrase duplicate(notes 4)
// // => [0 3 7 0 3 7 0 3 7 0 3 7]
// // repeat()
// // dup()

// ring rhythm [1 0 1 1 0 1 1]
// ring sequence every(rhythm 2 8)
// // => [1 0 1 1 0 1 1 0 0 0 0 0 0 0 0 0]

// ring melody [12 19 24 27 24]
// ring phrase every(melody 2 8)
// // => [12 19 24 27 24 0 0 0 0 0 0 0 0 0 0 0]

// ring notes [0 3 7 12]
// ring inv1 invert(notes)
// // => [12 9 5 0]
// ring inv2 invert(notes 5)
// // => [10 7 3 -2]
// ring inv3 invert(notes 3 10)
// // => [13 10 6 1]
// // inverse()
// // flip()
// // inv()

// ring partA [0 3 7 5 0]
// ring partB [12 19 15]
// ring partC [24 22]
// ring melody lace(partA partB partC)
// // => [0 12 24 3 19 22 7 15 5 0]
// // zip()

// ring partA [0 3 7 5 0]
// ring partB [12 19 15] 
// ring merged merge(partA partB)
// // => [[0 12] [3 19] [7 15] 5 0]
// // mix()

// ring notes [0 3 7 12]
// ring melodyA palindrome(notes)
// // => [0 3 7 12 12 7 3 0]

// ring melodyB palindrome(notes 1)
// // => [0 3 7 12 7 3]
// // palin()
// // mirror()

// ring melody [0 3 7 5 7 9 12]
// ring left rotate(melody -2)
// // => [7 5 7 9 12 0 3]

// ring right rotate(melody 2)
// // => [9 12 0 3 7 5 7]
// // rotate()
// // turn()
// // rot()

// ring melody [0 3 7 5]
// ring rev reverse(melody)
// // => [5 7 3 0]
// // retrograde()
// // rev()

// ring notes [12 19 15 17]
// ring places [1 0 0 1 1 0 1 0 1 0]
// ring sprayed spray(notes places)
// // => [12 0 0 19 15 0 17 0 12 0]

// ring notes [0 5 7 3 7 7 0 12 5]
// ring thinned unique(notes)
// // => [0 5 7 3 12]
// // thin()

// add()
// subtract()
// sub()
// multiply()
// mul()
// divide()
// div()
